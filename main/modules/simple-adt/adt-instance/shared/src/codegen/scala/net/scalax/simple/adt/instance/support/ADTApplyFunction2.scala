
    package net.scalax.simple.adt
    package instance
    package support

    object ADTApplyFunction2 {
      
      def adtApply1[Target, T1](target: Target, param: AdtCoProduct.UseOne[AdtFunction[Target, T1]]): AdtCoProduct.UseOne[T1] = ADTFuncBuilderHelper.inputHList(param, target)
    

      def adtApply2[Target, T1,T2](target: Target, param: AdtCoProduct.UsePositive[AdtFunction[Target, T1], AdtCoProduct.UseOne[AdtFunction[Target, T2]]]): AdtCoProduct.UsePositive[T1, AdtCoProduct.UseOne[T2]] = ADTFuncBuilderHelper.inputHList(param, target)
    

      def adtApply3[Target, T1,T2,T3](target: Target, param: AdtCoProduct.UsePositive[AdtFunction[Target, T1], AdtCoProduct.UsePositive[AdtFunction[Target, T2], AdtCoProduct.UseOne[AdtFunction[Target, T3]]]]): AdtCoProduct.UsePositive[T1, AdtCoProduct.UsePositive[T2, AdtCoProduct.UseOne[T3]]] = ADTFuncBuilderHelper.inputHList(param, target)
    

      def adtApply4[Target, T1,T2,T3,T4](target: Target, param: AdtCoProduct.UsePositive[AdtFunction[Target, T1], AdtCoProduct.UsePositive[AdtFunction[Target, T2], AdtCoProduct.UsePositive[AdtFunction[Target, T3], AdtCoProduct.UseOne[AdtFunction[Target, T4]]]]]): AdtCoProduct.UsePositive[T1, AdtCoProduct.UsePositive[T2, AdtCoProduct.UsePositive[T3, AdtCoProduct.UseOne[T4]]]] = ADTFuncBuilderHelper.inputHList(param, target)
    

      def adtApply5[Target, T1,T2,T3,T4,T5](target: Target, param: AdtCoProduct.UsePositive[AdtFunction[Target, T1], AdtCoProduct.UsePositive[AdtFunction[Target, T2], AdtCoProduct.UsePositive[AdtFunction[Target, T3], AdtCoProduct.UsePositive[AdtFunction[Target, T4], AdtCoProduct.UseOne[AdtFunction[Target, T5]]]]]]): AdtCoProduct.UsePositive[T1, AdtCoProduct.UsePositive[T2, AdtCoProduct.UsePositive[T3, AdtCoProduct.UsePositive[T4, AdtCoProduct.UseOne[T5]]]]] = ADTFuncBuilderHelper.inputHList(param, target)
    

      def adtApply6[Target, T1,T2,T3,T4,T5,T6](target: Target, param: AdtCoProduct.UsePositive[AdtFunction[Target, T1], AdtCoProduct.UsePositive[AdtFunction[Target, T2], AdtCoProduct.UsePositive[AdtFunction[Target, T3], AdtCoProduct.UsePositive[AdtFunction[Target, T4], AdtCoProduct.UsePositive[AdtFunction[Target, T5], AdtCoProduct.UseOne[AdtFunction[Target, T6]]]]]]]): AdtCoProduct.UsePositive[T1, AdtCoProduct.UsePositive[T2, AdtCoProduct.UsePositive[T3, AdtCoProduct.UsePositive[T4, AdtCoProduct.UsePositive[T5, AdtCoProduct.UseOne[T6]]]]]] = ADTFuncBuilderHelper.inputHList(param, target)
    

      def adtApply7[Target, T1,T2,T3,T4,T5,T6,T7](target: Target, param: AdtCoProduct.UsePositive[AdtFunction[Target, T1], AdtCoProduct.UsePositive[AdtFunction[Target, T2], AdtCoProduct.UsePositive[AdtFunction[Target, T3], AdtCoProduct.UsePositive[AdtFunction[Target, T4], AdtCoProduct.UsePositive[AdtFunction[Target, T5], AdtCoProduct.UsePositive[AdtFunction[Target, T6], AdtCoProduct.UseOne[AdtFunction[Target, T7]]]]]]]]): AdtCoProduct.UsePositive[T1, AdtCoProduct.UsePositive[T2, AdtCoProduct.UsePositive[T3, AdtCoProduct.UsePositive[T4, AdtCoProduct.UsePositive[T5, AdtCoProduct.UsePositive[T6, AdtCoProduct.UseOne[T7]]]]]]] = ADTFuncBuilderHelper.inputHList(param, target)
    

      def adtApply8[Target, T1,T2,T3,T4,T5,T6,T7,T8](target: Target, param: AdtCoProduct.UsePositive[AdtFunction[Target, T1], AdtCoProduct.UsePositive[AdtFunction[Target, T2], AdtCoProduct.UsePositive[AdtFunction[Target, T3], AdtCoProduct.UsePositive[AdtFunction[Target, T4], AdtCoProduct.UsePositive[AdtFunction[Target, T5], AdtCoProduct.UsePositive[AdtFunction[Target, T6], AdtCoProduct.UsePositive[AdtFunction[Target, T7], AdtCoProduct.UseOne[AdtFunction[Target, T8]]]]]]]]]): AdtCoProduct.UsePositive[T1, AdtCoProduct.UsePositive[T2, AdtCoProduct.UsePositive[T3, AdtCoProduct.UsePositive[T4, AdtCoProduct.UsePositive[T5, AdtCoProduct.UsePositive[T6, AdtCoProduct.UsePositive[T7, AdtCoProduct.UseOne[T8]]]]]]]] = ADTFuncBuilderHelper.inputHList(param, target)
    

      def adtApply9[Target, T1,T2,T3,T4,T5,T6,T7,T8,T9](target: Target, param: AdtCoProduct.UsePositive[AdtFunction[Target, T1], AdtCoProduct.UsePositive[AdtFunction[Target, T2], AdtCoProduct.UsePositive[AdtFunction[Target, T3], AdtCoProduct.UsePositive[AdtFunction[Target, T4], AdtCoProduct.UsePositive[AdtFunction[Target, T5], AdtCoProduct.UsePositive[AdtFunction[Target, T6], AdtCoProduct.UsePositive[AdtFunction[Target, T7], AdtCoProduct.UsePositive[AdtFunction[Target, T8], AdtCoProduct.UseOne[AdtFunction[Target, T9]]]]]]]]]]): AdtCoProduct.UsePositive[T1, AdtCoProduct.UsePositive[T2, AdtCoProduct.UsePositive[T3, AdtCoProduct.UsePositive[T4, AdtCoProduct.UsePositive[T5, AdtCoProduct.UsePositive[T6, AdtCoProduct.UsePositive[T7, AdtCoProduct.UsePositive[T8, AdtCoProduct.UseOne[T9]]]]]]]]] = ADTFuncBuilderHelper.inputHList(param, target)
    

      def adtApply10[Target, T1,T2,T3,T4,T5,T6,T7,T8,T9,T10](target: Target, param: AdtCoProduct.UsePositive[AdtFunction[Target, T1], AdtCoProduct.UsePositive[AdtFunction[Target, T2], AdtCoProduct.UsePositive[AdtFunction[Target, T3], AdtCoProduct.UsePositive[AdtFunction[Target, T4], AdtCoProduct.UsePositive[AdtFunction[Target, T5], AdtCoProduct.UsePositive[AdtFunction[Target, T6], AdtCoProduct.UsePositive[AdtFunction[Target, T7], AdtCoProduct.UsePositive[AdtFunction[Target, T8], AdtCoProduct.UsePositive[AdtFunction[Target, T9], AdtCoProduct.UseOne[AdtFunction[Target, T10]]]]]]]]]]]): AdtCoProduct.UsePositive[T1, AdtCoProduct.UsePositive[T2, AdtCoProduct.UsePositive[T3, AdtCoProduct.UsePositive[T4, AdtCoProduct.UsePositive[T5, AdtCoProduct.UsePositive[T6, AdtCoProduct.UsePositive[T7, AdtCoProduct.UsePositive[T8, AdtCoProduct.UsePositive[T9, AdtCoProduct.UseOne[T10]]]]]]]]]] = ADTFuncBuilderHelper.inputHList(param, target)
    

      def adtApply11[Target, T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11](target: Target, param: AdtCoProduct.UsePositive[AdtFunction[Target, T1], AdtCoProduct.UsePositive[AdtFunction[Target, T2], AdtCoProduct.UsePositive[AdtFunction[Target, T3], AdtCoProduct.UsePositive[AdtFunction[Target, T4], AdtCoProduct.UsePositive[AdtFunction[Target, T5], AdtCoProduct.UsePositive[AdtFunction[Target, T6], AdtCoProduct.UsePositive[AdtFunction[Target, T7], AdtCoProduct.UsePositive[AdtFunction[Target, T8], AdtCoProduct.UsePositive[AdtFunction[Target, T9], AdtCoProduct.UsePositive[AdtFunction[Target, T10], AdtCoProduct.UseOne[AdtFunction[Target, T11]]]]]]]]]]]]): AdtCoProduct.UsePositive[T1, AdtCoProduct.UsePositive[T2, AdtCoProduct.UsePositive[T3, AdtCoProduct.UsePositive[T4, AdtCoProduct.UsePositive[T5, AdtCoProduct.UsePositive[T6, AdtCoProduct.UsePositive[T7, AdtCoProduct.UsePositive[T8, AdtCoProduct.UsePositive[T9, AdtCoProduct.UsePositive[T10, AdtCoProduct.UseOne[T11]]]]]]]]]]] = ADTFuncBuilderHelper.inputHList(param, target)
    

      def adtApply12[Target, T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12](target: Target, param: AdtCoProduct.UsePositive[AdtFunction[Target, T1], AdtCoProduct.UsePositive[AdtFunction[Target, T2], AdtCoProduct.UsePositive[AdtFunction[Target, T3], AdtCoProduct.UsePositive[AdtFunction[Target, T4], AdtCoProduct.UsePositive[AdtFunction[Target, T5], AdtCoProduct.UsePositive[AdtFunction[Target, T6], AdtCoProduct.UsePositive[AdtFunction[Target, T7], AdtCoProduct.UsePositive[AdtFunction[Target, T8], AdtCoProduct.UsePositive[AdtFunction[Target, T9], AdtCoProduct.UsePositive[AdtFunction[Target, T10], AdtCoProduct.UsePositive[AdtFunction[Target, T11], AdtCoProduct.UseOne[AdtFunction[Target, T12]]]]]]]]]]]]]): AdtCoProduct.UsePositive[T1, AdtCoProduct.UsePositive[T2, AdtCoProduct.UsePositive[T3, AdtCoProduct.UsePositive[T4, AdtCoProduct.UsePositive[T5, AdtCoProduct.UsePositive[T6, AdtCoProduct.UsePositive[T7, AdtCoProduct.UsePositive[T8, AdtCoProduct.UsePositive[T9, AdtCoProduct.UsePositive[T10, AdtCoProduct.UsePositive[T11, AdtCoProduct.UseOne[T12]]]]]]]]]]]] = ADTFuncBuilderHelper.inputHList(param, target)
    

      def adtApply13[Target, T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13](target: Target, param: AdtCoProduct.UsePositive[AdtFunction[Target, T1], AdtCoProduct.UsePositive[AdtFunction[Target, T2], AdtCoProduct.UsePositive[AdtFunction[Target, T3], AdtCoProduct.UsePositive[AdtFunction[Target, T4], AdtCoProduct.UsePositive[AdtFunction[Target, T5], AdtCoProduct.UsePositive[AdtFunction[Target, T6], AdtCoProduct.UsePositive[AdtFunction[Target, T7], AdtCoProduct.UsePositive[AdtFunction[Target, T8], AdtCoProduct.UsePositive[AdtFunction[Target, T9], AdtCoProduct.UsePositive[AdtFunction[Target, T10], AdtCoProduct.UsePositive[AdtFunction[Target, T11], AdtCoProduct.UsePositive[AdtFunction[Target, T12], AdtCoProduct.UseOne[AdtFunction[Target, T13]]]]]]]]]]]]]]): AdtCoProduct.UsePositive[T1, AdtCoProduct.UsePositive[T2, AdtCoProduct.UsePositive[T3, AdtCoProduct.UsePositive[T4, AdtCoProduct.UsePositive[T5, AdtCoProduct.UsePositive[T6, AdtCoProduct.UsePositive[T7, AdtCoProduct.UsePositive[T8, AdtCoProduct.UsePositive[T9, AdtCoProduct.UsePositive[T10, AdtCoProduct.UsePositive[T11, AdtCoProduct.UsePositive[T12, AdtCoProduct.UseOne[T13]]]]]]]]]]]]] = ADTFuncBuilderHelper.inputHList(param, target)
    

      def adtApply14[Target, T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14](target: Target, param: AdtCoProduct.UsePositive[AdtFunction[Target, T1], AdtCoProduct.UsePositive[AdtFunction[Target, T2], AdtCoProduct.UsePositive[AdtFunction[Target, T3], AdtCoProduct.UsePositive[AdtFunction[Target, T4], AdtCoProduct.UsePositive[AdtFunction[Target, T5], AdtCoProduct.UsePositive[AdtFunction[Target, T6], AdtCoProduct.UsePositive[AdtFunction[Target, T7], AdtCoProduct.UsePositive[AdtFunction[Target, T8], AdtCoProduct.UsePositive[AdtFunction[Target, T9], AdtCoProduct.UsePositive[AdtFunction[Target, T10], AdtCoProduct.UsePositive[AdtFunction[Target, T11], AdtCoProduct.UsePositive[AdtFunction[Target, T12], AdtCoProduct.UsePositive[AdtFunction[Target, T13], AdtCoProduct.UseOne[AdtFunction[Target, T14]]]]]]]]]]]]]]]): AdtCoProduct.UsePositive[T1, AdtCoProduct.UsePositive[T2, AdtCoProduct.UsePositive[T3, AdtCoProduct.UsePositive[T4, AdtCoProduct.UsePositive[T5, AdtCoProduct.UsePositive[T6, AdtCoProduct.UsePositive[T7, AdtCoProduct.UsePositive[T8, AdtCoProduct.UsePositive[T9, AdtCoProduct.UsePositive[T10, AdtCoProduct.UsePositive[T11, AdtCoProduct.UsePositive[T12, AdtCoProduct.UsePositive[T13, AdtCoProduct.UseOne[T14]]]]]]]]]]]]]] = ADTFuncBuilderHelper.inputHList(param, target)
    

      def adtApply15[Target, T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15](target: Target, param: AdtCoProduct.UsePositive[AdtFunction[Target, T1], AdtCoProduct.UsePositive[AdtFunction[Target, T2], AdtCoProduct.UsePositive[AdtFunction[Target, T3], AdtCoProduct.UsePositive[AdtFunction[Target, T4], AdtCoProduct.UsePositive[AdtFunction[Target, T5], AdtCoProduct.UsePositive[AdtFunction[Target, T6], AdtCoProduct.UsePositive[AdtFunction[Target, T7], AdtCoProduct.UsePositive[AdtFunction[Target, T8], AdtCoProduct.UsePositive[AdtFunction[Target, T9], AdtCoProduct.UsePositive[AdtFunction[Target, T10], AdtCoProduct.UsePositive[AdtFunction[Target, T11], AdtCoProduct.UsePositive[AdtFunction[Target, T12], AdtCoProduct.UsePositive[AdtFunction[Target, T13], AdtCoProduct.UsePositive[AdtFunction[Target, T14], AdtCoProduct.UseOne[AdtFunction[Target, T15]]]]]]]]]]]]]]]]): AdtCoProduct.UsePositive[T1, AdtCoProduct.UsePositive[T2, AdtCoProduct.UsePositive[T3, AdtCoProduct.UsePositive[T4, AdtCoProduct.UsePositive[T5, AdtCoProduct.UsePositive[T6, AdtCoProduct.UsePositive[T7, AdtCoProduct.UsePositive[T8, AdtCoProduct.UsePositive[T9, AdtCoProduct.UsePositive[T10, AdtCoProduct.UsePositive[T11, AdtCoProduct.UsePositive[T12, AdtCoProduct.UsePositive[T13, AdtCoProduct.UsePositive[T14, AdtCoProduct.UseOne[T15]]]]]]]]]]]]]]] = ADTFuncBuilderHelper.inputHList(param, target)
    

      def adtApply16[Target, T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16](target: Target, param: AdtCoProduct.UsePositive[AdtFunction[Target, T1], AdtCoProduct.UsePositive[AdtFunction[Target, T2], AdtCoProduct.UsePositive[AdtFunction[Target, T3], AdtCoProduct.UsePositive[AdtFunction[Target, T4], AdtCoProduct.UsePositive[AdtFunction[Target, T5], AdtCoProduct.UsePositive[AdtFunction[Target, T6], AdtCoProduct.UsePositive[AdtFunction[Target, T7], AdtCoProduct.UsePositive[AdtFunction[Target, T8], AdtCoProduct.UsePositive[AdtFunction[Target, T9], AdtCoProduct.UsePositive[AdtFunction[Target, T10], AdtCoProduct.UsePositive[AdtFunction[Target, T11], AdtCoProduct.UsePositive[AdtFunction[Target, T12], AdtCoProduct.UsePositive[AdtFunction[Target, T13], AdtCoProduct.UsePositive[AdtFunction[Target, T14], AdtCoProduct.UsePositive[AdtFunction[Target, T15], AdtCoProduct.UseOne[AdtFunction[Target, T16]]]]]]]]]]]]]]]]]): AdtCoProduct.UsePositive[T1, AdtCoProduct.UsePositive[T2, AdtCoProduct.UsePositive[T3, AdtCoProduct.UsePositive[T4, AdtCoProduct.UsePositive[T5, AdtCoProduct.UsePositive[T6, AdtCoProduct.UsePositive[T7, AdtCoProduct.UsePositive[T8, AdtCoProduct.UsePositive[T9, AdtCoProduct.UsePositive[T10, AdtCoProduct.UsePositive[T11, AdtCoProduct.UsePositive[T12, AdtCoProduct.UsePositive[T13, AdtCoProduct.UsePositive[T14, AdtCoProduct.UsePositive[T15, AdtCoProduct.UseOne[T16]]]]]]]]]]]]]]]] = ADTFuncBuilderHelper.inputHList(param, target)
    

      def adtApply17[Target, T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17](target: Target, param: AdtCoProduct.UsePositive[AdtFunction[Target, T1], AdtCoProduct.UsePositive[AdtFunction[Target, T2], AdtCoProduct.UsePositive[AdtFunction[Target, T3], AdtCoProduct.UsePositive[AdtFunction[Target, T4], AdtCoProduct.UsePositive[AdtFunction[Target, T5], AdtCoProduct.UsePositive[AdtFunction[Target, T6], AdtCoProduct.UsePositive[AdtFunction[Target, T7], AdtCoProduct.UsePositive[AdtFunction[Target, T8], AdtCoProduct.UsePositive[AdtFunction[Target, T9], AdtCoProduct.UsePositive[AdtFunction[Target, T10], AdtCoProduct.UsePositive[AdtFunction[Target, T11], AdtCoProduct.UsePositive[AdtFunction[Target, T12], AdtCoProduct.UsePositive[AdtFunction[Target, T13], AdtCoProduct.UsePositive[AdtFunction[Target, T14], AdtCoProduct.UsePositive[AdtFunction[Target, T15], AdtCoProduct.UsePositive[AdtFunction[Target, T16], AdtCoProduct.UseOne[AdtFunction[Target, T17]]]]]]]]]]]]]]]]]]): AdtCoProduct.UsePositive[T1, AdtCoProduct.UsePositive[T2, AdtCoProduct.UsePositive[T3, AdtCoProduct.UsePositive[T4, AdtCoProduct.UsePositive[T5, AdtCoProduct.UsePositive[T6, AdtCoProduct.UsePositive[T7, AdtCoProduct.UsePositive[T8, AdtCoProduct.UsePositive[T9, AdtCoProduct.UsePositive[T10, AdtCoProduct.UsePositive[T11, AdtCoProduct.UsePositive[T12, AdtCoProduct.UsePositive[T13, AdtCoProduct.UsePositive[T14, AdtCoProduct.UsePositive[T15, AdtCoProduct.UsePositive[T16, AdtCoProduct.UseOne[T17]]]]]]]]]]]]]]]]] = ADTFuncBuilderHelper.inputHList(param, target)
    

      def adtApply18[Target, T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18](target: Target, param: AdtCoProduct.UsePositive[AdtFunction[Target, T1], AdtCoProduct.UsePositive[AdtFunction[Target, T2], AdtCoProduct.UsePositive[AdtFunction[Target, T3], AdtCoProduct.UsePositive[AdtFunction[Target, T4], AdtCoProduct.UsePositive[AdtFunction[Target, T5], AdtCoProduct.UsePositive[AdtFunction[Target, T6], AdtCoProduct.UsePositive[AdtFunction[Target, T7], AdtCoProduct.UsePositive[AdtFunction[Target, T8], AdtCoProduct.UsePositive[AdtFunction[Target, T9], AdtCoProduct.UsePositive[AdtFunction[Target, T10], AdtCoProduct.UsePositive[AdtFunction[Target, T11], AdtCoProduct.UsePositive[AdtFunction[Target, T12], AdtCoProduct.UsePositive[AdtFunction[Target, T13], AdtCoProduct.UsePositive[AdtFunction[Target, T14], AdtCoProduct.UsePositive[AdtFunction[Target, T15], AdtCoProduct.UsePositive[AdtFunction[Target, T16], AdtCoProduct.UsePositive[AdtFunction[Target, T17], AdtCoProduct.UseOne[AdtFunction[Target, T18]]]]]]]]]]]]]]]]]]]): AdtCoProduct.UsePositive[T1, AdtCoProduct.UsePositive[T2, AdtCoProduct.UsePositive[T3, AdtCoProduct.UsePositive[T4, AdtCoProduct.UsePositive[T5, AdtCoProduct.UsePositive[T6, AdtCoProduct.UsePositive[T7, AdtCoProduct.UsePositive[T8, AdtCoProduct.UsePositive[T9, AdtCoProduct.UsePositive[T10, AdtCoProduct.UsePositive[T11, AdtCoProduct.UsePositive[T12, AdtCoProduct.UsePositive[T13, AdtCoProduct.UsePositive[T14, AdtCoProduct.UsePositive[T15, AdtCoProduct.UsePositive[T16, AdtCoProduct.UsePositive[T17, AdtCoProduct.UseOne[T18]]]]]]]]]]]]]]]]]] = ADTFuncBuilderHelper.inputHList(param, target)
    

      def adtApply19[Target, T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19](target: Target, param: AdtCoProduct.UsePositive[AdtFunction[Target, T1], AdtCoProduct.UsePositive[AdtFunction[Target, T2], AdtCoProduct.UsePositive[AdtFunction[Target, T3], AdtCoProduct.UsePositive[AdtFunction[Target, T4], AdtCoProduct.UsePositive[AdtFunction[Target, T5], AdtCoProduct.UsePositive[AdtFunction[Target, T6], AdtCoProduct.UsePositive[AdtFunction[Target, T7], AdtCoProduct.UsePositive[AdtFunction[Target, T8], AdtCoProduct.UsePositive[AdtFunction[Target, T9], AdtCoProduct.UsePositive[AdtFunction[Target, T10], AdtCoProduct.UsePositive[AdtFunction[Target, T11], AdtCoProduct.UsePositive[AdtFunction[Target, T12], AdtCoProduct.UsePositive[AdtFunction[Target, T13], AdtCoProduct.UsePositive[AdtFunction[Target, T14], AdtCoProduct.UsePositive[AdtFunction[Target, T15], AdtCoProduct.UsePositive[AdtFunction[Target, T16], AdtCoProduct.UsePositive[AdtFunction[Target, T17], AdtCoProduct.UsePositive[AdtFunction[Target, T18], AdtCoProduct.UseOne[AdtFunction[Target, T19]]]]]]]]]]]]]]]]]]]]): AdtCoProduct.UsePositive[T1, AdtCoProduct.UsePositive[T2, AdtCoProduct.UsePositive[T3, AdtCoProduct.UsePositive[T4, AdtCoProduct.UsePositive[T5, AdtCoProduct.UsePositive[T6, AdtCoProduct.UsePositive[T7, AdtCoProduct.UsePositive[T8, AdtCoProduct.UsePositive[T9, AdtCoProduct.UsePositive[T10, AdtCoProduct.UsePositive[T11, AdtCoProduct.UsePositive[T12, AdtCoProduct.UsePositive[T13, AdtCoProduct.UsePositive[T14, AdtCoProduct.UsePositive[T15, AdtCoProduct.UsePositive[T16, AdtCoProduct.UsePositive[T17, AdtCoProduct.UsePositive[T18, AdtCoProduct.UseOne[T19]]]]]]]]]]]]]]]]]]] = ADTFuncBuilderHelper.inputHList(param, target)
    

      def adtApply20[Target, T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20](target: Target, param: AdtCoProduct.UsePositive[AdtFunction[Target, T1], AdtCoProduct.UsePositive[AdtFunction[Target, T2], AdtCoProduct.UsePositive[AdtFunction[Target, T3], AdtCoProduct.UsePositive[AdtFunction[Target, T4], AdtCoProduct.UsePositive[AdtFunction[Target, T5], AdtCoProduct.UsePositive[AdtFunction[Target, T6], AdtCoProduct.UsePositive[AdtFunction[Target, T7], AdtCoProduct.UsePositive[AdtFunction[Target, T8], AdtCoProduct.UsePositive[AdtFunction[Target, T9], AdtCoProduct.UsePositive[AdtFunction[Target, T10], AdtCoProduct.UsePositive[AdtFunction[Target, T11], AdtCoProduct.UsePositive[AdtFunction[Target, T12], AdtCoProduct.UsePositive[AdtFunction[Target, T13], AdtCoProduct.UsePositive[AdtFunction[Target, T14], AdtCoProduct.UsePositive[AdtFunction[Target, T15], AdtCoProduct.UsePositive[AdtFunction[Target, T16], AdtCoProduct.UsePositive[AdtFunction[Target, T17], AdtCoProduct.UsePositive[AdtFunction[Target, T18], AdtCoProduct.UsePositive[AdtFunction[Target, T19], AdtCoProduct.UseOne[AdtFunction[Target, T20]]]]]]]]]]]]]]]]]]]]]): AdtCoProduct.UsePositive[T1, AdtCoProduct.UsePositive[T2, AdtCoProduct.UsePositive[T3, AdtCoProduct.UsePositive[T4, AdtCoProduct.UsePositive[T5, AdtCoProduct.UsePositive[T6, AdtCoProduct.UsePositive[T7, AdtCoProduct.UsePositive[T8, AdtCoProduct.UsePositive[T9, AdtCoProduct.UsePositive[T10, AdtCoProduct.UsePositive[T11, AdtCoProduct.UsePositive[T12, AdtCoProduct.UsePositive[T13, AdtCoProduct.UsePositive[T14, AdtCoProduct.UsePositive[T15, AdtCoProduct.UsePositive[T16, AdtCoProduct.UsePositive[T17, AdtCoProduct.UsePositive[T18, AdtCoProduct.UsePositive[T19, AdtCoProduct.UseOne[T20]]]]]]]]]]]]]]]]]]]] = ADTFuncBuilderHelper.inputHList(param, target)
    

      def adtApply21[Target, T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21](target: Target, param: AdtCoProduct.UsePositive[AdtFunction[Target, T1], AdtCoProduct.UsePositive[AdtFunction[Target, T2], AdtCoProduct.UsePositive[AdtFunction[Target, T3], AdtCoProduct.UsePositive[AdtFunction[Target, T4], AdtCoProduct.UsePositive[AdtFunction[Target, T5], AdtCoProduct.UsePositive[AdtFunction[Target, T6], AdtCoProduct.UsePositive[AdtFunction[Target, T7], AdtCoProduct.UsePositive[AdtFunction[Target, T8], AdtCoProduct.UsePositive[AdtFunction[Target, T9], AdtCoProduct.UsePositive[AdtFunction[Target, T10], AdtCoProduct.UsePositive[AdtFunction[Target, T11], AdtCoProduct.UsePositive[AdtFunction[Target, T12], AdtCoProduct.UsePositive[AdtFunction[Target, T13], AdtCoProduct.UsePositive[AdtFunction[Target, T14], AdtCoProduct.UsePositive[AdtFunction[Target, T15], AdtCoProduct.UsePositive[AdtFunction[Target, T16], AdtCoProduct.UsePositive[AdtFunction[Target, T17], AdtCoProduct.UsePositive[AdtFunction[Target, T18], AdtCoProduct.UsePositive[AdtFunction[Target, T19], AdtCoProduct.UsePositive[AdtFunction[Target, T20], AdtCoProduct.UseOne[AdtFunction[Target, T21]]]]]]]]]]]]]]]]]]]]]]): AdtCoProduct.UsePositive[T1, AdtCoProduct.UsePositive[T2, AdtCoProduct.UsePositive[T3, AdtCoProduct.UsePositive[T4, AdtCoProduct.UsePositive[T5, AdtCoProduct.UsePositive[T6, AdtCoProduct.UsePositive[T7, AdtCoProduct.UsePositive[T8, AdtCoProduct.UsePositive[T9, AdtCoProduct.UsePositive[T10, AdtCoProduct.UsePositive[T11, AdtCoProduct.UsePositive[T12, AdtCoProduct.UsePositive[T13, AdtCoProduct.UsePositive[T14, AdtCoProduct.UsePositive[T15, AdtCoProduct.UsePositive[T16, AdtCoProduct.UsePositive[T17, AdtCoProduct.UsePositive[T18, AdtCoProduct.UsePositive[T19, AdtCoProduct.UsePositive[T20, AdtCoProduct.UseOne[T21]]]]]]]]]]]]]]]]]]]]] = ADTFuncBuilderHelper.inputHList(param, target)
    

      def adtApply22[Target, T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22](target: Target, param: AdtCoProduct.UsePositive[AdtFunction[Target, T1], AdtCoProduct.UsePositive[AdtFunction[Target, T2], AdtCoProduct.UsePositive[AdtFunction[Target, T3], AdtCoProduct.UsePositive[AdtFunction[Target, T4], AdtCoProduct.UsePositive[AdtFunction[Target, T5], AdtCoProduct.UsePositive[AdtFunction[Target, T6], AdtCoProduct.UsePositive[AdtFunction[Target, T7], AdtCoProduct.UsePositive[AdtFunction[Target, T8], AdtCoProduct.UsePositive[AdtFunction[Target, T9], AdtCoProduct.UsePositive[AdtFunction[Target, T10], AdtCoProduct.UsePositive[AdtFunction[Target, T11], AdtCoProduct.UsePositive[AdtFunction[Target, T12], AdtCoProduct.UsePositive[AdtFunction[Target, T13], AdtCoProduct.UsePositive[AdtFunction[Target, T14], AdtCoProduct.UsePositive[AdtFunction[Target, T15], AdtCoProduct.UsePositive[AdtFunction[Target, T16], AdtCoProduct.UsePositive[AdtFunction[Target, T17], AdtCoProduct.UsePositive[AdtFunction[Target, T18], AdtCoProduct.UsePositive[AdtFunction[Target, T19], AdtCoProduct.UsePositive[AdtFunction[Target, T20], AdtCoProduct.UsePositive[AdtFunction[Target, T21], AdtCoProduct.UseOne[AdtFunction[Target, T22]]]]]]]]]]]]]]]]]]]]]]]): AdtCoProduct.UsePositive[T1, AdtCoProduct.UsePositive[T2, AdtCoProduct.UsePositive[T3, AdtCoProduct.UsePositive[T4, AdtCoProduct.UsePositive[T5, AdtCoProduct.UsePositive[T6, AdtCoProduct.UsePositive[T7, AdtCoProduct.UsePositive[T8, AdtCoProduct.UsePositive[T9, AdtCoProduct.UsePositive[T10, AdtCoProduct.UsePositive[T11, AdtCoProduct.UsePositive[T12, AdtCoProduct.UsePositive[T13, AdtCoProduct.UsePositive[T14, AdtCoProduct.UsePositive[T15, AdtCoProduct.UsePositive[T16, AdtCoProduct.UsePositive[T17, AdtCoProduct.UsePositive[T18, AdtCoProduct.UsePositive[T19, AdtCoProduct.UsePositive[T20, AdtCoProduct.UsePositive[T21, AdtCoProduct.UseOne[T22]]]]]]]]]]]]]]]]]]]]]] = ADTFuncBuilderHelper.inputHList(param, target)
    
    }
  